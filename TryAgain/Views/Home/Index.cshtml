@using System.Web.Helpers;
@using System.Runtime.Serialization

@{
    ViewBag.Title = "Index";
}

<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
<link href="@Url.Content("~/Content/charts.css")" rel="stylesheet" type="text/css" />
<script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="//d3js.org/d3.v3.min.js"></script>

@{
    var jss = new System.Web.Script.Serialization.JavaScriptSerializer();
    var rateJson = jss.Serialize(ViewData["RateData"]);
}

<p id="demo"></p>

<p id="barTitle"></p>
<svg class="barChart"></svg>

<br />
<!--<div class="lineChart"></div>-->
<!--<canvas ></canvas>   -->

<script>


    var Bardata =  @Html.Raw(Json.Encode(ViewData["RateData"]));
    document.getElementById("demo").innerText = Bardata;
    document.getElementById("barTitle").innerText = "The number of post according to the rate!!";


    var w = 100, h = 150;

    var chart = d3.select(".barChart")
        .attr("class", "chart")
        .attr("width", w * Bardata.length)
        .attr("height", h)
        ;

    var x = d3.scale.linear()
        .domain([0, 1])
        .range([0, w]);

    var y = d3.scale.linear()
        .domain([0, 50])
        .rangeRound([0, h]); //rangeRound is used for antialiasing

    // x and y are the lower-left position of the bar
    // width is the width of the bar
    // height is the height of the bar
    // for crisp edges use -.5 (antialiasing)
    chart.selectAll("rect")
        .data(Bardata)
        .enter().append("rect")
        .attr("x", function (d, i) { return x(i) - .5; })
        .attr("y", function (d) { return h - y(d) - .5; })
        .attr("width", w)
        .attr("height", function (d) { return y(d); })
        .text(function (d) { return (d); });

    // horizontal line for the x-axis
    chart.append("line")
        .attr("x1", 0)
        .attr("x2", w * Bardata.length)
        .attr("y1", h - .5)
        .attr("y2", h - .5)
        .style("stroke", "#000");


</script>

<p id="LineTitle"></p>
<div id="lineChart"></div>
<script>


        var Ldata = @Html.Raw(Json.Encode(ViewData["RateData"]));

        document.getElementById("LineTitle").innerText =  "The number of post according too NOY";

        var margin = { top: 50, right: 50, bottom: 50, left: 50 }
            , width = window.innerWidth - margin.left - margin.right // Use the window's width 
            , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height

        // The number of datapoints
        var n = 21;

        // 5. X scale will use the index of our data
        var xScale = d3.scaleLinear()
            .domain([0, n - 1]) // input
            .range([0, width]); // output

        // 6. Y scale will use the randomly generate number 
        var yScale = d3.scaleLinear()
            .domain([0, 1]) // input 
            .range([height, 0]); // output 

        // 7. d3's line generator
        var line = d3.line()
            .x(function (d, i) { return xScale(i); }) // set the x values for the line generator
            .y(function (d) { return yScale(d.y); }) // set the y values for the line generator 
            .curve(d3.curveMonotoneX) // apply smoothing to the line

        // 8. An array of objects of length N. Each object has key -> value pair, the key being "y" and the value is a random number
      //  var dataset = d3.range(Ldata.length).data(Ldata).map(function (d) { return { "y": d } })

        // 1. Add the SVG to the page and employ #2
        var svg = d3.select("lineChart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // 3. Call the x axis in a group tag
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom

        // 4. Call the y axis in a group tag
        svg.append("g")
            .attr("class", "y axis")
            .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft

        // 9. Append the path, bind the data, and call the line generator 
        svg.append("path")
            .datum(Ldata) // 10. Binds data to the line 
            .attr("class", "line") // Assign a class for styling 
            .attr("d", line); // 11. Calls the line generator 

        // 12. Appends a circle for each datapoint 
        svg.selectAll(".dot")
            .data(Ldata)
            .enter().append("circle") // Uses the enter().append() method
            .attr("class", "dot") // Assign a class for styling
            .attr("cx", function (d, i) { return xScale(i) })
            .attr("cy", function (d) { return yScale(d.y) })
            .attr("r", 5);

</script>

